// Code generated by MockGen. DO NOT EDIT.
// Source: repository/accounts.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/terajari/bank-api/model"
)

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountsRepository) Create(ctx context.Context, account model.Accounts) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountsRepositoryMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsRepository)(nil).Create), ctx, account)
}

// Delete mocks base method.
func (m *MockAccountsRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountsRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountsRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockAccountsRepository) Get(ctx context.Context, id string) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountsRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountsRepository)(nil).Get), ctx, id)
}

// GetForUpdate mocks base method.
func (m *MockAccountsRepository) GetForUpdate(ctx context.Context, id string) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUpdate", ctx, id)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUpdate indicates an expected call of GetForUpdate.
func (mr *MockAccountsRepositoryMockRecorder) GetForUpdate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUpdate", reflect.TypeOf((*MockAccountsRepository)(nil).GetForUpdate), ctx, id)
}

// List mocks base method.
func (m *MockAccountsRepository) List(ctx context.Context, owner string, limit, offset int) ([]model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, owner, limit, offset)
	ret0, _ := ret[0].([]model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountsRepositoryMockRecorder) List(ctx, owner, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountsRepository)(nil).List), ctx, owner, limit, offset)
}

// Update mocks base method.
func (m *MockAccountsRepository) Update(ctx context.Context, account model.Accounts) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountsRepositoryMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountsRepository)(nil).Update), ctx, account)
}
